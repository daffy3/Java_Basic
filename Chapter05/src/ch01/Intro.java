package ch01;

public class Intro {
    // 01. 여러가지 '자료구조'에 대해 알아봅시다.

    // 자료구조란 무엇인가? (Data Structure)
    // - 프로그램에서 사용할 많은 데이터를 메모리 상에서 관리하는 여러 구현방법들
    // - 효율적인 자료구조가 성능 좋은 알고리즘의 기반이 된다.
    // - 자료의 효율적인 관리는 프로그램의 수행속도와 밀접한 관련이 있다.
    // - 여러 자료 구조 중에서 구현하려는 프로그램에 맞는 최적의 자료구조를 활용해야 하므로 자료구조에 대한 이해가 중요하다.

    // 자료구조에는 어떤 것들이 있나?
    // - 한 줄로 자료를 관리하기 (선형자료구조)
    // - 배열(Array): 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 자료의 물리적 위치와 논리적 위치가 같다.
    //   배열은 물리적인 순서와 논리적인 순서가 동일하기 때문에, 배열 중간의 값이 비어있으면 안된다. 배열은 몇 개의 메모리를 쓰겠다 라고 정하고 시작한다.
    //   배열은 몇 번째 요소를 찾는데 빠르다.
    // - 연결리스트(LinkedList): 선형으로 자료를 관리. 자료가 추가될 때마다 메모리를 할당받고, 자료는 링크로 연걸됨. 자료의 물리직 위치와 논리적 위치가 다를 수 있다.
    //   요소 하나하나를 노드라고 말함. 데이터가 추가되고 삭제되는 데 소요되는 시간 즉 속도가 배열보다 연결리스트가 훨씬 빠르다.
    // - 스택(Stack): 가장 나중에 입력된 자료가 가장 먼저 출력되는 자료구조 - (후입선출)
    // - 큐(Queue): 가장 먼저 입력된 자료가 가장 먼저 출력되는 자료구조 - (선입선출)
}
